/****************************************************************************
 * Copyright 2024 Sony Semiconductor Solutions Corp. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ****************************************************************************/

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_OUTPUTTENSOR_OUTPUT_TENSOR_H_
#define FLATBUFFERS_GENERATED_OUTPUTTENSOR_OUTPUT_TENSOR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace output_tensor {

struct Tensor;
struct TensorBuilder;

struct Tensor FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TensorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SIZE = 4,
    VT_BUFFER = 6
  };
  int32_t size() const {
    return GetField<int32_t>(VT_SIZE, 0);
  }
  const ::flatbuffers::Vector<float> *buffer() const {
    return GetPointer<const ::flatbuffers::Vector<float> *>(VT_BUFFER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_SIZE, 4) &&
           VerifyOffset(verifier, VT_BUFFER) &&
           verifier.VerifyVector(buffer()) &&
           verifier.EndTable();
  }
};

struct TensorBuilder {
  typedef Tensor Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_size(int32_t size) {
    fbb_.AddElement<int32_t>(Tensor::VT_SIZE, size, 0);
  }
  void add_buffer(::flatbuffers::Offset<::flatbuffers::Vector<float>> buffer) {
    fbb_.AddOffset(Tensor::VT_BUFFER, buffer);
  }
  explicit TensorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Tensor> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Tensor>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Tensor> CreateTensor(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<float>> buffer = 0) {
  TensorBuilder builder_(_fbb);
  builder_.add_buffer(buffer);
  builder_.add_size(size);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Tensor> CreateTensorDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t size = 0,
    const std::vector<float> *buffer = nullptr) {
  auto buffer__ = buffer ? _fbb.CreateVector<float>(*buffer) : 0;
  return output_tensor::CreateTensor(
      _fbb,
      size,
      buffer__);
}

inline const output_tensor::Tensor *GetTensor(const void *buf) {
  return ::flatbuffers::GetRoot<output_tensor::Tensor>(buf);
}

inline const output_tensor::Tensor *GetSizePrefixedTensor(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<output_tensor::Tensor>(buf);
}

inline bool VerifyTensorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<output_tensor::Tensor>(nullptr);
}

inline bool VerifySizePrefixedTensorBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<output_tensor::Tensor>(nullptr);
}

inline void FinishTensorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<output_tensor::Tensor> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTensorBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<output_tensor::Tensor> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace output_tensor

#endif  // FLATBUFFERS_GENERATED_OUTPUTTENSOR_OUTPUT_TENSOR_H_
