name: CI

on:
  pull_request:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/**
    tags:
      - v**

jobs:
  unit-tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        test-path:
          - libs/tests/unit/data_export
          - libs/tests/unit/draw
          - libs/tests/unit/log
          - libs/tests/unit/sensor
          - libs/tests/unit/sm
          - libs/tests/unit/common
          - libs/tests/unit/send_data
          - libs/tests/unit/send_data/process_format
          - libs/tests/unit/nn
          - libs/tests/unit/edgeapp_core
          - sample_apps/passthrough/tests
          - sample_apps/passthrough/data_processor/tests
          - sample_apps/draw/tests
          - sample_apps/classification/tests
          - sample_apps/classification/data_processor/tests
          - sample_apps/detection/tests
          - sample_apps/detection/data_processor/tests
          - sample_apps/posenet/tests
          - sample_apps/posenet/data_processor/tests
          - sample_apps/segmentation/tests
          - sample_apps/segmentation/data_processor/tests
          - sample_apps/lp_recog/tests
          - sample_apps/lp_recog/data_processor/tests
          - sample_apps/switch_dnn/tests
          - sample_apps/perfbench/tests
          - sample_apps/utils/tests
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Install compiler and packages
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov clang-format-14 valgrind

    - name: Run pre-commit
      uses: pre-commit/action@v3.0.1
      with:
        extra_args: -a -c .pre-commit-config.yaml

    - name: Build and run tests
      run: |
        function build_and_run_tests() {
          set -e
          local build_dir="$1/build"
          cmake "${4:-}" -B "$build_dir" $1
          cmake --build "$build_dir" -- -j8
          if [ -n "$2" ]; then
            ctest --test-dir "$build_dir" $2
          else
            ctest --test-dir "$build_dir"
          fi
        }
        # Disable memcheck for aitrios_sm and common tests, as they generate false positives
        if [[ "${{ matrix.test-path }}" == *"sm"* || "${{ matrix.test-path }}" == *"common"* ]]; then
          MEMCHECK=""
        else
          MEMCHECK="-T memcheck -j8"
        fi

        build_and_run_tests ${{ matrix.test-path }} "$MEMCHECK"

  integration-tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        app: [passthrough, draw, classification, detection, posenet, segmentation, switch_dnn, apitest, lp_recog]
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind
        pip3 install -r tests/edge_app/requirements.txt

    - name: Build edge app
      working-directory: tests/edge_app
      run: |
        mkdir build && cd build
        cmake -DEVP_MOCK=1 -DMOCK=1 -DAPPS_SELECTION=${{ matrix.app }} -DCMAKE_BUILD_TYPE=Debug .. && make -j8

    - name: Run integration test (with memcheck)
      run: |
        python3 -m pytest -s tests/edge_app/test_integration.py --app ${{ matrix.app }}

